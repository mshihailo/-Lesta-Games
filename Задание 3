#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

const int INSERTION_SORT_THRESHOLD = 16;

void insertionSort(std::vector<int>& arr, int left, int right) {
    for (int i = left + 1; i <= right; ++i) {
        int key = arr[i];
        int j = i - 1;
        while (j >= left && arr[j] > key) {
            arr[j + 1] = arr[j];
            --j;
        }
        arr[j + 1] = key;
    }
}

void heapify(std::vector<int>& arr, int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        std::swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapSort(std::vector<int>& arr, int start, int end) {
    int n = end - start + 1;

    for (int i = n / 2 - 1; i >= 0; --i)
        heapify(arr, n, i);

    for (int i = n - 1; i >= 0; --i) {
        std::swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

int partition(std::vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; ++j) {
        if (arr[j] <= pivot) {
            ++i;
            std::swap(arr[i], arr[j]);
        }
    }
    std::swap(arr[i + 1], arr[high]);
    return i + 1;
}

void introsortUtil(std::vector<int>& arr, int start, int end, int depthLimit) {
    int size = end - start + 1;

    if (size <= INSERTION_SORT_THRESHOLD) {
        insertionSort(arr, start, end);
    } else if (depthLimit == 0) {
        heapSort(arr, start, end);
    } else {
        int pivot = partition(arr, start, end);
        introsortUtil(arr, start, pivot - 1, depthLimit - 1);
        introsortUtil(arr, pivot + 1, end, depthLimit - 1);
    }
}

void introsort(std::vector<int>& arr) {
    int depthLimit = 2 * log(arr.size());
    introsortUtil(arr, 0, arr.size() - 1, depthLimit);
}
